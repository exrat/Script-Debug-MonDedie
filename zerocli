#!/bin/bash
#
# apt-get install rhino -y
# exemple: sh zerocli.sh /etc/nginx/sites-enabled/rutorrent.conf


version="0.4"
tmpfile="/tmp/.zerocli.tmp"
datafile="/tmp/.zerocli.data"
curloutput="/tmp/.zerocli.curl.out"
curlerr="/tmp/.zerocli.curl.err"
server=""
me=$(basename $0)
path=$(dirname $0)
workingdir=""
config=""

ttw=10
burn=0
open=0
syntax=0
expire=1week
get=0
post=1
quiet=0
group=0
file=""
atime="5min 10min 1hour 1day 1week 1month 1year never"
engine=$(which rhino)
engineopts="rhino"

_pwd=$PWD

# search for a config file and load it if present
if [ -d "$path" -a -e "$path/zerocli.conf" ]; then
	. "$path/zerocli.conf"
fi

if [ ! -z "$config" -a -e "$config" ]; then
	. "$config"
fi

if [ -f "$HOME/.zeroclirc" ]; then
	. "$HOME/.zeroclirc"
fi

# set the path variable based on the $workingdir variable
function setpath() {
	if [ ! -z "$workingdir" ]; then
		[ ! -d "$workingdir" ] && {
			cat <<EOF
Error: '$workingdir' no such directory
EOF
			exit 1
		}   
		path=$workingdir
	else
		if [ "$path" != "." ]; then
			echo $path | grep -e "^/" &>/dev/null || {
				path=$(which $me)
				[ -z "$path" ] && {
					cat <<EOF
Error: no working dir found
You can solve this problem either by calling this program with an absolute path
or by adding the script to your PATH or by setting up the 'workingdir' variable
into the script or conf file
EOF
					exit 1
				}   
			}   
		fi  
	fi
}

# prints error in all cases
function myerror() {
	echo "[e] $*" >&2
}

# prints a log unless $quiet = 1
function mylog() {
	[ $quiet -ne 1 ] && echo "[i] $*" >&2
}

# DO NOT EDIT THE FOLLOWING LINE!
package='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
8/nn88/nn88/9uf/A11lfBoAuAEA
'

[ ! -x "$engine" ] && {
	myerror "Error: '$engine' not found or not executable"
	exit 1
}

# Check for curl
curl=$(which curl)
[ ! -x "$curl" ] && {
	myerror "Please install curl"
	exit 1
}

# function to extract the archive contained in $package (you can generate a self extractible archive using the compact.sh script)
function unpak() {
	[ -z "$package" ] && return
	required="js/zerocli.js js/base64.js js/flate.js js/rawdeflate.js js/rawinflate.js js/sjcl.js main.js VERSION"
	br=0
	for f in $required; do
		[ ! -f "$path/$f" ] && {
			mylog "missing '$path/$f'"
			rm -rf "$path/main.js" "$path/js" "$path/VERSION" &>/dev/null
			br=1
			break
		}
	done
	v=$(cat $path/VERSION 2>/dev/null)
	[ $br -eq 0 -a "$v" = "$version" ] && return
	mylog "Extracting files '$v' -> '$version'"
	# if $br = 1 or version mismatch at least 1 file is missing so we unpack the archive
	sav=$PWD
	cd $path || exit $?
	echo "$package" | base64 -d >package.tgz
	tar xzf package.tgz
	rm package.tgz
	cd $sav
}

# prints the help menu and exit
function usage() {
	cat <<EOF
$me [options...] [files...]
usage:
	-c, --config <file>   use this configuration file
	-q, --quiet           do not display logs
	-b, --burn            burn after reading
	-o, --open            open discussion
	-s, --syntax          syntax coloring
	-e, --expire <time>   specify the expiration time (default: 1week)
	-f, --file <file>     file to send, you can have multiple (default: read from stdin)
	-g, --get <url>       get data from URL
	-G, --group           group all the specified files
	-p, --post            post data to server (it is the default behaviour)
	-S, --server <server> specify the server url
	-t, --ttw             time to wait between two posts (default: 10)
	-h, --help            prints this menu and exit

available time settings:
5min,10min,1hour,1day,1week,1month,1year,never
EOF
	exit 1
}

# check if the file we want to send is not empty
function testfile() {
	file=$1
	size=$(ls -l $file | awk '{print $5; }')
	test "$size" = "0" && {
		myerror "Could not send empty file"
		[ -f $tmpfile ] && rm $tmpfile
		exit 2
	}
}

# options may be followed by one colon to indicate they have a required argument
options=$(getopt -n "$me" -o "Ghpqbose:f:g:S:c:t::" -l "group,help,put,quiet,burn,open,syntax,expire:,file:,get:,server:,config:,ttw::" -- "$@") || {
	# something went wrong, getopt will put out an error message for us
	usage
}

set -- $options

if [ "$(getopt --version)" = " --" ]; then
	# bsd getopt - skip configuration declarations
	nb_delims_to_remove=2
	while [ $# -gt 0 ]; do
		if [ $1 = "--" ]; then
			shift
			nb_delims_to_remove=$(expr $nb_delims_to_remove - 1)
			if [ $nb_delims_to_remove -lt 1 ]; then
				break
			fi
		fi

		shift
	done
fi

while [ $# -gt 0 ]
do
	case $1 in
		-q|--quiet) quiet=1 ;;
		-b|--burn) burn=1 ;;
		-o|--open) open=1 ;;
		-s|--syntax) syntax=1 ;;
		-p|--post) post=1 ;;
		-h|--help) usage ;;
		-G|--group) group=1 ;;
		# for options with required arguments, an additional shift is required
		-e|--expire) 
			expire=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			t=0
			for e in $atime; do
				if [ "$expire" = "$e" ]; then
					t=1
					break
				fi
			done
			[ $t -ne 1 ] && {
				myerror "Error: '$expire' is not a valid expiration time"
				exit 1
			}
			;;
		-f|--file) [ -z "$file" ] && file="$2" || file="$file $2"; shift ;;
		-g|--get) get=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-S|--server) server=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-t|--ttw) ttw=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-c|--config) 
			config=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			[ ! -e "$config" ] && {
				myerror "Error: '$config' does not exist"
				exit
			}
			. "$config"
			;;
		(--) shift; break ;;
		(-*) myerror "$me: error - unrecognized option $1"; usage ;;
		(*) break ;;
	esac
	shift
done

for arg; do [ -z "${file}" ] && file="$arg" || file="$file $arg"; done

setpath

unpak

# verify we have a server address to post data
[ -z "$server" -a "$get" = "0" ] && {
	myerror "Error: You must specify a server in order to post data"
	myerror "You can set it in the script or use the -S argument or the config file"
	exit 1
}

# function that post or get data using curl
function mycurl() {
	url=$1
	data=$2
	if [ -z "$data" ]; then
		output=$($curl -i                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	else
		output=$(echo -n "$data" | $curl -i                       \
			 -H "Content-Type: application/x-www-form-urlencoded" \
			 -X POST                                              \
			 -d @-                                                \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	fi
		
	# check the return code
	[ $ret -ne 0 ] && {
		myerror "Error: curl returned $ret"
		myerror "Please refer to curl manpage for more details"
		cat $curlerr >&2
		rm $curlerr $curloutput &>/dev/null
		exit $ret
	}

	# check the HTTP return code
	code=$(grep -e "^HTTP/1\." $curloutput | tail -1 | awk '{print $2;}')
	case $code in
		200)
			[ -z "$data" ] && return
			# When we post data, we expect the Content-Type to be application/json
			ct=$(grep "^Content-Type:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			[ -z "$ct" -o "$ct" != "application/json" ] && {
				myerror "Error: server returned code $code but with content-type '$ct' where 'application/json' is expected"
#				cat $curloutput >&2
				rm $curlerr $curloutput &>/dev/null
				exit 6
			}
			mylog "OK server returned code 200" ;;
		302|301)
			redirect=$(grep "^Location:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			mylog "Got a redirection $code to '$redirect'"
			mylog "retrying..."
			mycurl "$redirect" "$data"
			;;
		*) 
			myerror "Error: server returned $code"
			myerror "Please read this page for more details about HTTP return code: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
			rm $curlerr $curloutput &>/dev/null
			exit 5
			;;
	esac
}

function _loading () {
	pid=$1
	msg=$2
	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\r$msg$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	wait $pid
	ret=$?
	rm $tmpfile &>/dev/null
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\r$msg... [failed]" >&2
		myerror "Error: javascript engine returned code $ret"
		cat $datafile >&2
		rm $datafile &>/dev/null
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\r$msg... [done]" >&2
}

# function that post data
# it cat take a list of file as argument and will send them recursively
function post() {
	myfile=$1
	[ -z "$myfile" ] && {
		cat >$tmpfile <&0
		myfile=$tmpfile
	}

	i=0
	for f in $myfile; do
		i=$(($i+1))
		[ $i -eq 2 ] && break
	done

	[ $i -eq 2 ] && {
		for f in $myfile; do
			if [ $group -eq 0 ]; then
				post $f
				# by default ZeroBin expect us to wait 10s between each post
				mylog "waiting $ttw seconds before next post"
				sleep $ttw
			else
				tmp=$(echo $f | sed "s/^.//;s/.$//")
				cat $tmp >>$tmpfile
				myfile=$tmpfile
			fi
		done
		[ $group -eq 0 ] && return
	}

	myfile=$(echo $myfile | sed -r "s/^'(.+)'$/\1/")
	[ ${myfile:0:1} = "/" ] && mfile=$myfile || mfile=$_pwd/$myfile
	testfile $mfile
	
	$engine "$path/main.js" $engineopts "$path/" "post" "$mfile" 2>&1 >$datafile &
	pid=$!

	[ $quiet -ne 1 ] && echo >&2

	_loading $pid "Encrypting data"

	key=$(grep "key:" $datafile | sed "s/^key://")

	# we need to 'htmlencode' our data before posting them. We use this hack to handle large data
	encode=$(perl -MURI::Escape -e '@f=<>; foreach (@f) { if (m/^data:/) { s/^data://; print uri_escape($_); exit(0); } }' $datafile)
	rm $datafile
	params="data=$encode&burnafterreading=$burn&expire=$expire&opendiscussion=$open&syntaxcoloring=$syntax"

	mycurl "$server" "$params"

	status=$(tail -1 $curloutput | sed -r 's/^.*"status":([0-9]).*$/\1/');
	[ -z "$status" -o "$status" != "0" ] && {
		myerror "something went wrong..."
		cat $curloutput >&2
		rm $curlerr $curloutput &>/dev/null
		exit 4
	}
	id=$(tail -1 $curloutput | sed -r 's/^.*"id":"([^"]+)".*$/\1/');
	deletetoken=$(tail -1 $curloutput | sed -r 's/^.*"deletetoken":"([^"]+)".*$/\1/');

	# add a / in server if not present
	server=$(echo $server | sed -r "s|^(.+[^/])$|\1/|")

	if [ "$myfile" = "$tmpfile" ]; then
		echo "Your data have been successfully pasted"
	else
		echo "The file '$myfile' has been successfully pasted"
	fi
	echo "url: $server?$id#$key"
	echo "delete url: $server?pasteid=$id&deletetoken=$deletetoken"

	rm $curlerr $curloutput &>/dev/null
}

function get() {
	echo $get | grep -E "^.*\?.*#(.+)$" &>/dev/null
	[ $? -ne 0 ] && {
		myerror "Error: missing key to decrypt data"
		exit 7
	}
	key=$(echo $get | sed -r "s/^.*\?.*#(.+)$/\1/")
	mycurl "$get"
	str=$(grep "cipherdata" $curloutput)
	rm $curlerr $curloutput &>/dev/null
	data=$(echo $str | grep ">\[.*\]<")
	[ -z "$data" ] && {
		myerror "Paste does not exist is expired or has been removed"
		exit 3
	}
	clean=$(echo $str | sed -r "s/^.*(\[.*)$/\1/;s/^(.*\]).*$/\1/")
	echo $clean | sed -r "s/^.*data\":(.*),\"meta.*$/\1/;s/\\\\//g;s/^[^{]*//;s/[^}]*$//;s/\s*$//" >$tmpfile

	$engine "$path/main.js" $engineopts "$path/" "get" "$key" "$tmpfile" 2>&1 >$datafile &
	pid=$!

	_loading $pid "Decrypting data"

	cat $datafile
	rm $datafile

	exit 0
}

# ensure only you (and root) can read the temporary files
umask 0077

[ "$get" != "0" ] && get

>$tmpfile

[ "$post" = "1" ] && post "$file"

exit 0
